_target_: tinycmax.model.rotation_model.ConvRotationModel # TODO
_convert_: object
# TODO: remove model type
frozen_model: tinycmax/model/eval_flow_models/pretrained/nervous_ram_566
transfer_layer: pred
include_init: True
# TODO: shouldn't these next two be linked to the loss
rotation_mode: difference  # absolute / difference / zero-offset  # new
rotation_type: euler_deg  # quat / rotvec / matrix / euler / euler_deg  # new


# experiment: Default

# data:
#     path: datasets/data/rotation/
#     mode: events # events/time
#     window: 1000 # events/time
#     window_loss: 10000 # events

# name: FullRotationModel
# model_type: conv
# use_existing: true
# prev_runid: nervous-ram-566
# transfer_layer: pred
# include_init: True

# #name: FireNet # EVFlowNet/*FireFlowNet/*FireNet/E2VID/RecEVFlowNet

# encoding: cnt # voxel/cnt
# round_encoding: False # for voxel encoding
# norm_input: False # normalize input
# num_bins: 2
# base_num_channels: 32
# kernel_size: 3
# activations: [relu, Null] # activations for ff and rec neurons
# mask_output: True

# spiking_neuron: Null
    
# loss:
#     flow_regul_weight: 0.001
#     clip_grad: 100.0 # set to Null to disable
#     overwrite_intermediate: False

# optimizer:
#     name: Adam
#     lr: 0.0002

# loader:
#     rotation_mode: difference  # absolute / difference / zero-offset  # new
#     rotation_type: euler_deg  # quat / rotvec / matrix / euler / euler_deg  # new
#     n_epochs: 100
#     batch_size: 7
#     resolution: [128, 128] # H x W
#     augment: ["Horizontal", "Vertical", "Polarity"]
#     augment_prob: [0, 0, 0.]  # [0.5, 0.1, 0.]
#     gpu: 0

# vis:
#     verbose: True
#     enabled: False
#     px: 400
#     store_grads: False

# hot_filter:
#     enabled: False
#     max_px: 100
#     min_obvs: 5
#     max_rate: 0.8
